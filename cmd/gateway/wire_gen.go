// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"gateway/internal/api"
	"gateway/internal/biz"
	"gateway/internal/client"
	"gateway/internal/conf"
	"gateway/internal/gin"
	"gateway/internal/pkg/registry"
	"gateway/internal/server"
	"gateway/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(etcd *conf.Etcd, confServer *conf.Server, logger log.Logger) (*kratos.App, func(), error) {
	etcdRegistry := registry.NewEtcdRegistry(etcd)
	productClient, err := client.NewProduct_0Client(etcdRegistry, logger)
	if err != nil {
		return nil, nil, err
	}
	productBiz := biz.NewProductBiz(logger, productClient)
	productService := service.NewProductService(productBiz)
	productHandler := api.NewProductHandler(productService)
	categoryClient, err := client.NewProductClient(etcdRegistry, logger)
	if err != nil {
		return nil, nil, err
	}
	categoryBiz := biz.NewCategoryBiz(logger, categoryClient)
	categoryService := service.NewCategoryService(categoryBiz)
	categoryHandler := api.NewCategoryHandler(categoryService)
	ginGin := gin.NewGin(productHandler, categoryHandler)
	httpServer := server.NewHTTPServer(confServer, logger, ginGin)
	app := newApp(logger, etcdRegistry, httpServer)
	return app, func() {
	}, nil
}
